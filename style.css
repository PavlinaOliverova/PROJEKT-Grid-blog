/* nejsme vcerejsi, pouzivame moderni box model */
html { box-sizing: border-box; }
*, :after, :before { box-sizing: inherit; }


body {
	margin: 0;
	padding: 30px;
	font-family:  'Alice', serif;
	font-size: 18px;
	line-height: 1.5;
}

h1, h2, h3 {
	font-family: 'Kaushan Script', cursive;
	font-weight: normal;
	margin: 0;
}

blockquote {
	font-family: 'Kaushan Script', cursive;
}

/* --------------------------------------------------- */

/* barvy */
:root {
	--svetla: #edf3f5;
	--seda: #b2bec3;
	--tmava: #636e72;
	--oranzova: #ee5a24;
	--cervena: #ea2027;
	--zluta: #f79f1f;
	--zelena: #a3cb38;
	--limetka: #c4e538;
}

/*
	Všimni si, jak jsou zde nadefinované barvy.
	Potřebný kód barvy si odtamtud můžeš vyzobnout a použít
	ve svém kódu, ale existuje i lepší způsob.

  CSS custom properties, někdy také označované jako CSS
	variables (CSS proměnné), je způsob, jak si	pojmenovat
	nějakou hodnotu a potom ji v kódu opakovaně používat.
	Často se používá právě pro barvy a další "nastavení".

	Když si chci nějakou hodnotu nadefinovat, použiji zápis
	--mujnazev: hodnota
	Když chci, abych mohl hodnotu používat všude v CSS,
	založím ji uvnitř selektoru :root, takže např.:
	:root {
		--mojebarva: #ff8800;
	}

	Chci-li potom dál v CSS hodnotu použít, stačí použít funkci var a v závorce název proměnné.Např.:
	.odstavec {
		color: var(--mojebarva);
	}

	Nemusím si tak pamatovat kódy barev nebo neustále v CSS jezdit nahoru a dolů, abych si je odněkud zkopíroval.

	Více o CSS custom properties:
	- https://www.w3schools.com/css/css3_variables.asp
	- https://css-tricks.com/patterns-for-practical-css-custom-properties-use/
	- https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/
*/

:root {
	--h: #a3cb38;
}

body{
	color: #636e72
}

article {
	display: grid;
	grid-template-columns: 1fr 4fr 2fr;
	grid-auto-rows:auto;
	gap: 40px;
}

header{
	grid-column: 2 / 3;
	color: var(--h);
	font-size: 64px;
}

h1{
	margin-bottom: 70px;
	margin-top: 70px;
}

header p {
	color: #b2bec3;
	font-size: 18px;
}

p {
	grid-column: 2 / 3;
	margin:0;
}

figure {
	grid-column: 1 / -1;
	margin: 0;
}

figcaption { color: #b2bec3;}

img{
	width: 100%;
	object-fit: cover;
}

.tip-vlevo {
	grid-column: 1 / 2;
	text-align: right;
	border-right: 2px solid #ee5a24;
}

.tip-vpravo {
	grid-column: 3 / -1;
	border-left: 2px solid #ee5a24;
}

.tip p {
	background-color: #edf3f5;
	color: #636e72;
}


h2 {
	grid-column: 2 / 3;
	color: #a3cb38;
	font-size: 48px;
	margin-top: 30px;
}

blockquote {
	grid-column: 1 / -1;
	font-size: 40px;
	color: #b2bec3;
	text-align: center;
}

blockquote::before{
	content: "";
	display: block;
	width: 100px;
	height: 3px;
	background-color: #c4e538;
	margin: 0 auto 40px auto;
}

blockquote::after{
	content: "";
	display: block;
	width: 100px;
	height: 3px;
	background-color: #c4e538;
	margin: 40px auto 0px auto;
}

.tip a {
	color: #ee5a24;
}

footer {
	grid-column: 2 / 3;
	color: #b2bec3;
	margin-top: 20px;
}

footer a {
	color: #b2bec3;
}


.tip {
	background: #edf3f5;
	padding: 20px;
	height: fit-content;
  }
  